{"ast":null,"code":"import authService from '../services/auth';\nimport userService from '../services/user';\nimport storageService from '../utils/localStorage';\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'LOGIN':\n      return action.payload;\n    case 'SIGNUP':\n      return action.payload;\n    case 'LOGOUT':\n      return null;\n    case 'SET_USER':\n      return action.payload;\n    case 'SET_AVATAR':\n      return {\n        ...state,\n        ...action.payload\n      };\n    case 'REMOVE_AVATAR':\n      return {\n        ...state,\n        avatar: {\n          exists: false\n        }\n      };\n    default:\n      return state;\n  }\n};\nexport const loginUser = credentials => {\n  return async dispatch => {\n    const user = await authService.login(credentials);\n    storageService.saveUser(user);\n    authService.setToken(user.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: user\n    });\n  };\n};\nexport const signupUser = credentials => {\n  return async dispatch => {\n    const user = await authService.signup(credentials);\n    storageService.saveUser(user);\n    authService.setToken(user.token);\n    dispatch({\n      type: 'SIGNUP',\n      payload: user\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    storageService.logoutUser();\n    authService.setToken(null);\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n};\nexport const setUser = () => {\n  return dispatch => {\n    const loggedUser = storageService.loadUser();\n    if (loggedUser) {\n      authService.setToken(loggedUser.token);\n      dispatch({\n        type: 'SET_USER',\n        payload: loggedUser\n      });\n    }\n  };\n};\nexport const setAvatar = avatarImage => {\n  return async dispatch => {\n    const uploadedAvatar = await userService.uploadAvatar({\n      avatarImage\n    });\n    const prevUserData = storageService.loadUser();\n    storageService.saveUser({\n      ...prevUserData,\n      ...uploadedAvatar\n    });\n    dispatch({\n      type: 'SET_AVATAR',\n      payload: uploadedAvatar\n    });\n  };\n};\nexport const deleteAvatar = () => {\n  return async dispatch => {\n    await userService.removeAvatar();\n    const prevUserData = storageService.loadUser();\n    storageService.saveUser({\n      ...prevUserData,\n      avatar: {\n        exists: false\n      }\n    });\n    dispatch({\n      type: 'REMOVE_AVATAR'\n    });\n  };\n};\nexport default userReducer;","map":{"version":3,"names":["authService","userService","storageService","userReducer","state","arguments","length","undefined","action","type","payload","avatar","exists","loginUser","credentials","dispatch","user","login","saveUser","setToken","token","signupUser","signup","logoutUser","setUser","loggedUser","loadUser","setAvatar","avatarImage","uploadedAvatar","uploadAvatar","prevUserData","deleteAvatar","removeAvatar"],"sources":["C:/Ak/E/reddish-master/client/src/reducers/userReducer.js"],"sourcesContent":["import authService from '../services/auth';\nimport userService from '../services/user';\nimport storageService from '../utils/localStorage';\n\nconst userReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return action.payload;\n    case 'SIGNUP':\n      return action.payload;\n    case 'LOGOUT':\n      return null;\n    case 'SET_USER':\n      return action.payload;\n    case 'SET_AVATAR':\n      return { ...state, ...action.payload };\n    case 'REMOVE_AVATAR':\n      return { ...state, avatar: { exists: false } };\n    default:\n      return state;\n  }\n};\n\nexport const loginUser = (credentials) => {\n  return async (dispatch) => {\n    const user = await authService.login(credentials);\n    storageService.saveUser(user);\n    authService.setToken(user.token);\n\n    dispatch({\n      type: 'LOGIN',\n      payload: user,\n    });\n  };\n};\n\nexport const signupUser = (credentials) => {\n  return async (dispatch) => {\n    const user = await authService.signup(credentials);\n    storageService.saveUser(user);\n    authService.setToken(user.token);\n\n    dispatch({\n      type: 'SIGNUP',\n      payload: user,\n    });\n  };\n};\n\nexport const logoutUser = () => {\n  return (dispatch) => {\n    storageService.logoutUser();\n    authService.setToken(null);\n\n    dispatch({\n      type: 'LOGOUT',\n    });\n  };\n};\n\nexport const setUser = () => {\n  return (dispatch) => {\n    const loggedUser = storageService.loadUser();\n\n    if (loggedUser) {\n      authService.setToken(loggedUser.token);\n\n      dispatch({\n        type: 'SET_USER',\n        payload: loggedUser,\n      });\n    }\n  };\n};\n\nexport const setAvatar = (avatarImage) => {\n  return async (dispatch) => {\n    const uploadedAvatar = await userService.uploadAvatar({ avatarImage });\n    const prevUserData = storageService.loadUser();\n    storageService.saveUser({ ...prevUserData, ...uploadedAvatar });\n\n    dispatch({\n      type: 'SET_AVATAR',\n      payload: uploadedAvatar,\n    });\n  };\n};\n\nexport const deleteAvatar = () => {\n  return async (dispatch) => {\n    await userService.removeAvatar();\n    const prevUserData = storageService.loadUser();\n    storageService.saveUser({ ...prevUserData, avatar: { exists: false } });\n\n    dispatch({\n      type: 'REMOVE_AVATAR',\n    });\n  };\n};\n\nexport default userReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}