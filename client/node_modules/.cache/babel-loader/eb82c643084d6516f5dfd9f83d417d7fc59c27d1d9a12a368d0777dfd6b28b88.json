{"ast":null,"code":"import _regeneratorRuntime from\"C:/Ak/E/reddish-master/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Ak/E/reddish-master/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Ak/E/reddish-master/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{useDispatch}from'react-redux';import{useHistory}from'react-router-dom';import{addNewSub}from'../reducers/subReducer';import{Formik,Form}from'formik';import{TextInput}from'./FormikMuiFields';import{notify}from'../reducers/notificationReducer';import AlertMessage from'./AlertMessage';import*as yup from'yup';import getErrorMsg from'../utils/getErrorMsg';import{useSubredditFormStyles}from'../styles/muiStyles';import{Button,Typography}from'@material-ui/core';import InfoIcon from'@material-ui/icons/Info';import AddIcon from'@material-ui/icons/Add';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var validationSchema=yup.object({subredditName:yup.string().required('Required').max(20,'Must be at most 20 characters').min(3,'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/,'Only alphanumeric characters allowed, no spaces/symbols'),description:yup.string().required('Required').max(100,'Must be at most 100 characters').min(3,'Must be at least 3 characters')});var SubForm=function SubForm(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var dispatch=useDispatch();var classes=useSubredditFormStyles();var history=useHistory();var handleCreateSub=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(values,_ref){var setSubmitting;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:setSubmitting=_ref.setSubmitting;_context.prev=1;setSubmitting(true);_context.next=5;return dispatch(addNewSub(values));case 5:setSubmitting(false);dispatch(notify(\"New subreddish created: r/\".concat(values.subredditName),'success'));history.push(\"/r/\".concat(values.subredditName));_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](1);setSubmitting(false);dispatch(notify(getErrorMsg(_context.t0),'error'));case 14:case\"end\":return _context.stop();}},_callee,null,[[1,10]]);}));return function handleCreateSub(_x,_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:classes.formWrapper,children:[/*#__PURE__*/_jsx(Formik,{validateOnChange:true,initialValues:{subredditName:'',description:''},onSubmit:handleCreateSub,validationSchema:validationSchema,children:function children(_ref3){var isSubmitting=_ref3.isSubmitting;return/*#__PURE__*/_jsxs(Form,{className:classes.form,children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.input,children:[/*#__PURE__*/_jsx(Typography,{className:classes.inputIconText,color:\"primary\",variant:\"h5\",children:\"r/\"}),/*#__PURE__*/_jsx(TextInput,{name:\"subredditName\",type:\"text\",placeholder:\"Enter name\",label:\"Subreddish Name\",required:true,fullWidth:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:classes.descInput,children:[/*#__PURE__*/_jsx(InfoIcon,{className:classes.inputIcon,color:\"primary\"}),/*#__PURE__*/_jsx(TextInput,{name:\"description\",type:\"text\",placeholder:\"Enter description\",label:\"Description\",required:true,fullWidth:true,variant:\"outlined\",multiline:true,rows:2,maxRows:Infinity})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"secondary\",variant:\"contained\",size:\"large\",className:classes.submitButton,disabled:isSubmitting,startIcon:/*#__PURE__*/_jsx(AddIcon,{}),children:isSubmitting?'Creating':'Create Subreddish'})]});}}),/*#__PURE__*/_jsx(AlertMessage,{error:error,severity:\"error\",clearError:function clearError(){return setError(null);}})]});};export default SubForm;","map":{"version":3,"names":["React","useState","useDispatch","useHistory","addNewSub","Formik","Form","TextInput","notify","AlertMessage","yup","getErrorMsg","useSubredditFormStyles","Button","Typography","InfoIcon","AddIcon","jsx","_jsx","jsxs","_jsxs","validationSchema","object","subredditName","string","required","max","min","matches","description","SubForm","_useState","_useState2","_slicedToArray","error","setError","dispatch","classes","history","handleCreateSub","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","setSubmitting","wrap","_callee$","_context","prev","next","concat","push","t0","stop","_x","_x2","apply","arguments","className","formWrapper","children","validateOnChange","initialValues","onSubmit","_ref3","isSubmitting","form","input","inputIconText","color","variant","name","type","placeholder","label","fullWidth","descInput","inputIcon","multiline","rows","maxRows","Infinity","size","submitButton","disabled","startIcon","severity","clearError"],"sources":["C:/Ak/E/reddish-master/client/src/components/SubForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst validationSchema = yup.object({\n  subredditName: yup\n    .string()\n    .required('Required')\n    .max(20, 'Must be at most 20 characters')\n    .min(3, 'Must be at least 3 characters')\n    .matches(\n      /^[a-zA-Z0-9-_]*$/,\n      'Only alphanumeric characters allowed, no spaces/symbols'\n    ),\n  description: yup\n    .string()\n    .required('Required')\n    .max(100, 'Must be at most 100 characters')\n    .min(3, 'Must be at least 3 characters'),\n});\n\nconst SubForm = () => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(\n        notify(`New subreddish created: r/${values.subredditName}`, 'success')\n      );\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.formWrapper}>\n      <Formik\n        validateOnChange={true}\n        initialValues={{ subredditName: '', description: '' }}\n        onSubmit={handleCreateSub}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form className={classes.form}>\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color=\"primary\"\n                variant=\"h5\"\n              >\n                r/\n              </Typography>\n              <TextInput\n                name=\"subredditName\"\n                type=\"text\"\n                placeholder=\"Enter name\"\n                label=\"Subreddish Name\"\n                required\n                fullWidth\n              />\n            </div>\n            <div className={classes.descInput}>\n              <InfoIcon className={classes.inputIcon} color=\"primary\" />\n              <TextInput\n                name=\"description\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                label=\"Description\"\n                required\n                fullWidth\n                variant=\"outlined\"\n                multiline\n                rows={2}\n                maxRows={Infinity}\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"contained\"\n              size=\"large\"\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={<AddIcon />}\n            >\n              {isSubmitting ? 'Creating' : 'Create Subreddish'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity=\"error\"\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default SubForm;\n"],"mappings":"yWAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,aAAa,CACzC,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,SAAS,KAAQ,wBAAwB,CAClD,OAASC,MAAM,CAAEC,IAAI,KAAQ,QAAQ,CACrC,OAASC,SAAS,KAAQ,mBAAmB,CAC7C,OAASC,MAAM,KAAQ,iCAAiC,CACxD,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,GAAK,CAAAC,GAAG,KAAM,KAAK,CAC1B,MAAO,CAAAC,WAAW,KAAM,sBAAsB,CAE9C,OAASC,sBAAsB,KAAQ,qBAAqB,CAC5D,OAASC,MAAM,CAAEC,UAAU,KAAQ,mBAAmB,CACtD,MAAO,CAAAC,QAAQ,KAAM,yBAAyB,CAC9C,MAAO,CAAAC,OAAO,KAAM,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE7C,GAAM,CAAAC,gBAAgB,CAAGX,GAAG,CAACY,MAAM,CAAC,CAClCC,aAAa,CAAEb,GAAG,CACfc,MAAM,EAAE,CACRC,QAAQ,CAAC,UAAU,CAAC,CACpBC,GAAG,CAAC,EAAE,CAAE,+BAA+B,CAAC,CACxCC,GAAG,CAAC,CAAC,CAAE,+BAA+B,CAAC,CACvCC,OAAO,CACN,kBAAkB,CAClB,yDAAyD,CAC1D,CACHC,WAAW,CAAEnB,GAAG,CACbc,MAAM,EAAE,CACRC,QAAQ,CAAC,UAAU,CAAC,CACpBC,GAAG,CAAC,GAAG,CAAE,gCAAgC,CAAC,CAC1CC,GAAG,CAAC,CAAC,CAAE,+BAA+B,CAC3C,CAAC,CAAC,CAEF,GAAM,CAAAG,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAA,CAAS,CACpB,IAAAC,SAAA,CAA0B9B,QAAQ,CAAC,IAAI,CAAC,CAAA+B,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAjCG,KAAK,CAAAF,UAAA,IAAEG,QAAQ,CAAAH,UAAA,IACtB,GAAM,CAAAI,QAAQ,CAAGlC,WAAW,EAAE,CAC9B,GAAM,CAAAmC,OAAO,CAAGzB,sBAAsB,EAAE,CACxC,GAAM,CAAA0B,OAAO,CAAGnC,UAAU,EAAE,CAE5B,GAAM,CAAAoC,eAAe,6BAAAC,KAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,MAAM,CAAAC,IAAA,MAAAC,aAAA,QAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAIL,aAAa,CAAAD,IAAA,CAAbC,aAAa,CAAAG,QAAA,CAAAC,IAAA,GAElDJ,aAAa,CAAC,IAAI,CAAC,CAACG,QAAA,CAAAE,IAAA,SACd,CAAAhB,QAAQ,CAAChC,SAAS,CAACyC,MAAM,CAAC,CAAC,QACjCE,aAAa,CAAC,KAAK,CAAC,CACpBX,QAAQ,CACN5B,MAAM,8BAAA6C,MAAA,CAA8BR,MAAM,CAACtB,aAAa,EAAI,SAAS,CAAC,CACvE,CACDe,OAAO,CAACgB,IAAI,OAAAD,MAAA,CAAOR,MAAM,CAACtB,aAAa,EAAG,CAAC2B,QAAA,CAAAE,IAAA,kBAAAF,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAK,EAAA,CAAAL,QAAA,aAE3CH,aAAa,CAAC,KAAK,CAAC,CACpBX,QAAQ,CAAC5B,MAAM,CAACG,WAAW,CAAAuC,QAAA,CAAAK,EAAA,CAAK,CAAE,OAAO,CAAC,CAAC,CAAC,yBAAAL,QAAA,CAAAM,IAAA,MAAAZ,OAAA,iBAE/C,kBAbK,CAAAL,eAAeA,CAAAkB,EAAA,CAAAC,GAAA,SAAAlB,KAAA,CAAAmB,KAAA,MAAAC,SAAA,OAapB,CAED,mBACExC,KAAA,QAAKyC,SAAS,CAAExB,OAAO,CAACyB,WAAY,CAAAC,QAAA,eAClC7C,IAAA,CAACb,MAAM,EACL2D,gBAAgB,CAAE,IAAK,CACvBC,aAAa,CAAE,CAAE1C,aAAa,CAAE,EAAE,CAAEM,WAAW,CAAE,EAAG,CAAE,CACtDqC,QAAQ,CAAE3B,eAAgB,CAC1BlB,gBAAgB,CAAEA,gBAAiB,CAAA0C,QAAA,CAElC,SAAAA,SAAAI,KAAA,KAAG,CAAAC,YAAY,CAAAD,KAAA,CAAZC,YAAY,oBACdhD,KAAA,CAACd,IAAI,EAACuD,SAAS,CAAExB,OAAO,CAACgC,IAAK,CAAAN,QAAA,eAC5B3C,KAAA,QAAKyC,SAAS,CAAExB,OAAO,CAACiC,KAAM,CAAAP,QAAA,eAC5B7C,IAAA,CAACJ,UAAU,EACT+C,SAAS,CAAExB,OAAO,CAACkC,aAAc,CACjCC,KAAK,CAAC,SAAS,CACfC,OAAO,CAAC,IAAI,CAAAV,QAAA,CACb,IAED,EAAa,cACb7C,IAAA,CAACX,SAAS,EACRmE,IAAI,CAAC,eAAe,CACpBC,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,YAAY,CACxBC,KAAK,CAAC,iBAAiB,CACvBpD,QAAQ,MACRqD,SAAS,OACT,GACE,cACN1D,KAAA,QAAKyC,SAAS,CAAExB,OAAO,CAAC0C,SAAU,CAAAhB,QAAA,eAChC7C,IAAA,CAACH,QAAQ,EAAC8C,SAAS,CAAExB,OAAO,CAAC2C,SAAU,CAACR,KAAK,CAAC,SAAS,EAAG,cAC1DtD,IAAA,CAACX,SAAS,EACRmE,IAAI,CAAC,aAAa,CAClBC,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,mBAAmB,CAC/BC,KAAK,CAAC,aAAa,CACnBpD,QAAQ,MACRqD,SAAS,MACTL,OAAO,CAAC,UAAU,CAClBQ,SAAS,MACTC,IAAI,CAAE,CAAE,CACRC,OAAO,CAAEC,QAAS,EAClB,GACE,cACNlE,IAAA,CAACL,MAAM,EACL8D,IAAI,CAAC,QAAQ,CACbH,KAAK,CAAC,WAAW,CACjBC,OAAO,CAAC,WAAW,CACnBY,IAAI,CAAC,OAAO,CACZxB,SAAS,CAAExB,OAAO,CAACiD,YAAa,CAChCC,QAAQ,CAAEnB,YAAa,CACvBoB,SAAS,cAAEtE,IAAA,CAACF,OAAO,IAAI,CAAA+C,QAAA,CAEtBK,YAAY,CAAG,UAAU,CAAG,mBAAmB,EACzC,GACJ,EACR,EACM,cACTlD,IAAA,CAACT,YAAY,EACXyB,KAAK,CAAEA,KAAM,CACbuD,QAAQ,CAAC,OAAO,CAChBC,UAAU,CAAE,SAAAA,WAAA,QAAM,CAAAvD,QAAQ,CAAC,IAAI,CAAC,EAAC,EACjC,GACE,CAEV,CAAC,CAED,cAAe,CAAAL,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}