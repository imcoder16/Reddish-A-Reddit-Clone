{"ast":null,"code":"import postService from '../services/posts';\nconst postReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'SET_POSTS':\n      return action.payload;\n    case 'LOAD_MORE_POSTS':\n      return {\n        ...action.payload,\n        results: [...state.results, ...action.payload.results]\n      };\n    case 'TOGGLE_VOTE':\n      return {\n        ...state,\n        results: state.results.map(r => r.id !== action.payload.id ? r : {\n          ...r,\n          ...action.payload.data\n        })\n      };\n    case 'DELETE_POST':\n      return {\n        ...state,\n        results: state.results.filter(r => r.id !== action.payload)\n      };\n    default:\n      return state;\n  }\n};\nexport const fetchPosts = sortBy => {\n  return async dispatch => {\n    let posts;\n    if (sortBy !== 'subscribed') {\n      posts = await postService.getPosts(sortBy, 10, 1);\n    } else {\n      posts = await postService.getSubPosts(10, 1);\n    }\n    dispatch({\n      type: 'SET_POSTS',\n      payload: posts\n    });\n  };\n};\nexport const loadMorePosts = (sortBy, page) => {\n  return async dispatch => {\n    let posts;\n    if (sortBy !== 'subscribed') {\n      posts = await postService.getPosts(sortBy, 10, page);\n    } else {\n      posts = await postService.getSubPosts(10, page);\n    }\n    dispatch({\n      type: 'LOAD_MORE_POSTS',\n      payload: posts\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport const removePost = id => {\n  return async dispatch => {\n    await postService.deletePost(id);\n    dispatch({\n      type: 'DELETE_POST',\n      payload: id\n    });\n  };\n};\nexport default postReducer;","map":{"version":3,"names":["postService","postReducer","state","arguments","length","undefined","action","type","payload","results","map","r","id","data","filter","fetchPosts","sortBy","dispatch","posts","getPosts","getSubPosts","loadMorePosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","upvotePost","toggleDownvote","downvotePost","removePost","deletePost"],"sources":["C:/Ak/E/reddish-master/client/src/reducers/postReducer.js"],"sourcesContent":["import postService from '../services/posts';\n\nconst postReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_POSTS':\n      return action.payload;\n    case 'LOAD_MORE_POSTS':\n      return {\n        ...action.payload,\n        results: [...state.results, ...action.payload.results],\n      };\n    case 'TOGGLE_VOTE':\n      return {\n        ...state,\n        results: state.results.map((r) =>\n          r.id !== action.payload.id ? r : { ...r, ...action.payload.data }\n        ),\n      };\n    case 'DELETE_POST':\n      return {\n        ...state,\n        results: state.results.filter((r) => r.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const fetchPosts = (sortBy) => {\n  return async (dispatch) => {\n    let posts;\n\n    if (sortBy !== 'subscribed') {\n      posts = await postService.getPosts(sortBy, 10, 1);\n    } else {\n      posts = await postService.getSubPosts(10, 1);\n    }\n\n    dispatch({\n      type: 'SET_POSTS',\n      payload: posts,\n    });\n  };\n};\n\nexport const loadMorePosts = (sortBy, page) => {\n  return async (dispatch) => {\n    let posts;\n    if (sortBy !== 'subscribed') {\n      posts = await postService.getPosts(sortBy, 10, page);\n    } else {\n      posts = await postService.getSubPosts(10, page);\n    }\n\n    dispatch({\n      type: 'LOAD_MORE_POSTS',\n      payload: posts,\n    });\n  };\n};\n\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.upvotePost(id);\n  };\n};\n\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.downvotePost(id);\n  };\n};\n\nexport const removePost = (id) => {\n  return async (dispatch) => {\n    await postService.deletePost(id);\n\n    dispatch({\n      type: 'DELETE_POST',\n      payload: id,\n    });\n  };\n};\n\nexport default postReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}