{"ast":null,"code":"import _slicedToArray from\"C:/Ak/E/reddish-master/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{useSelector}from'react-redux';import PostForm from'./PostForm';import HideOnScroll from'./HideOnScroll';import{getCircularAvatar}from'../utils/cloudinaryTransform';import{DialogTitle,DialogContent}from'./CustomDialogTitle';import{Dialog,Button,Fab,IconButton,Paper,Avatar,useMediaQuery,MenuItem,ListItemIcon}from'@material-ui/core';import{useDialogStyles}from'../styles/muiStyles';import{useTheme}from'@material-ui/core/styles';import PostAddIcon from'@material-ui/icons/PostAdd';import ImageIcon from'@material-ui/icons/Image';import LinkIcon from'@material-ui/icons/Link';import EditIcon from'@material-ui/icons/Edit';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddPostModal=function AddPostModal(_ref){var actionType=_ref.actionType,handleMenuClose=_ref.handleMenuClose,postToEditType=_ref.postToEditType,postToEditTitle=_ref.postToEditTitle,postToEditSub=_ref.postToEditSub,postToEditId=_ref.postToEditId,textSubmission=_ref.textSubmission,linkSubmission=_ref.linkSubmission,fromSubreddit=_ref.fromSubreddit;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var _useState3=useState('Text'),_useState4=_slicedToArray(_useState3,2),postType=_useState4[0],setPostType=_useState4[1];var user=useSelector(function(state){return state.user;});var classes=useDialogStyles();var theme=useTheme();var isMobile=useMediaQuery(theme.breakpoints.down('xs'));var handleClickOpen=function handleClickOpen(){setOpen(true);};var handleClose=function handleClose(){setOpen(false);};var handleTextPost=function handleTextPost(){setPostType('Text');handleClickOpen();};var handleImagePost=function handleImagePost(){setPostType('Image');handleClickOpen();};var handleLinkPost=function handleLinkPost(){setPostType('Link');handleClickOpen();};var handleMenuClick=function handleMenuClick(){handleClickOpen();handleMenuClose();};if(!user){return null;}return/*#__PURE__*/_jsxs(\"div\",{children:[actionType==='edit'?/*#__PURE__*/_jsx(MenuItem,{onClick:handleMenuClick,children:/*#__PURE__*/_jsxs(ListItemIcon,{children:[/*#__PURE__*/_jsx(EditIcon,{style:{marginRight:7}}),\"Edit Post\"]})}):isMobile?/*#__PURE__*/_jsx(HideOnScroll,{children:/*#__PURE__*/_jsx(Fab,{className:classes.fab,color:\"primary\",onClick:handleClickOpen,children:/*#__PURE__*/_jsx(PostAddIcon,{})})}):/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",className:classes.createPostWrapper,children:[user.avatar&&user.avatar.exists?/*#__PURE__*/_jsx(Avatar,{alt:user.username,src:getCircularAvatar(user.avatar.imageLink)}):/*#__PURE__*/_jsx(Avatar,{className:classes.defaultAvatar,children:user.username[0]}),/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"outlined\",onClick:handleTextPost,fullWidth:true,className:classes.createBtn,startIcon:/*#__PURE__*/_jsx(PostAddIcon,{}),size:\"large\",children:\"Create Post\"}),/*#__PURE__*/_jsxs(\"div\",{className:classes.iconGroup,children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleImagePost,children:/*#__PURE__*/_jsx(ImageIcon,{color:\"primary\"})}),/*#__PURE__*/_jsx(IconButton,{onClick:handleLinkPost,children:/*#__PURE__*/_jsx(LinkIcon,{color:\"primary\"})})]})]}),/*#__PURE__*/_jsxs(Dialog,{open:open,onClose:handleClose,classes:{paper:classes.dialogWrapper},maxWidth:\"md\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{onClose:handleClose,children:actionType==='edit'?'Update your post':'Add a new post'}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(PostForm,{actionType:actionType,postType:postType,postToEditType:postToEditType,postToEditTitle:postToEditTitle,postToEditSub:postToEditSub,postToEditId:postToEditId,textSubmission:textSubmission,linkSubmission:linkSubmission,fromSubreddit:fromSubreddit})})]})]});};export default AddPostModal;","map":{"version":3,"names":["React","useState","useSelector","PostForm","HideOnScroll","getCircularAvatar","DialogTitle","DialogContent","Dialog","Button","Fab","IconButton","Paper","Avatar","useMediaQuery","MenuItem","ListItemIcon","useDialogStyles","useTheme","PostAddIcon","ImageIcon","LinkIcon","EditIcon","jsx","_jsx","jsxs","_jsxs","AddPostModal","_ref","actionType","handleMenuClose","postToEditType","postToEditTitle","postToEditSub","postToEditId","textSubmission","linkSubmission","fromSubreddit","_useState","_useState2","_slicedToArray","open","setOpen","_useState3","_useState4","postType","setPostType","user","state","classes","theme","isMobile","breakpoints","down","handleClickOpen","handleClose","handleTextPost","handleImagePost","handleLinkPost","handleMenuClick","children","onClick","style","marginRight","className","fab","color","variant","createPostWrapper","avatar","exists","alt","username","src","imageLink","defaultAvatar","fullWidth","createBtn","startIcon","size","iconGroup","onClose","paper","dialogWrapper","maxWidth"],"sources":["C:/Ak/E/reddish-master/client/src/components/PostFormModal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PostForm from './PostForm';\nimport HideOnScroll from './HideOnScroll';\nimport { getCircularAvatar } from '../utils/cloudinaryTransform';\n\nimport { DialogTitle, DialogContent } from './CustomDialogTitle';\nimport {\n  Dialog,\n  Button,\n  Fab,\n  IconButton,\n  Paper,\n  Avatar,\n  useMediaQuery,\n  MenuItem,\n  ListItemIcon,\n} from '@material-ui/core';\nimport { useDialogStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst AddPostModal = ({\n  actionType,\n  handleMenuClose,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [postType, setPostType] = useState('Text');\n  const user = useSelector((state) => state.user);\n\n  const classes = useDialogStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleTextPost = () => {\n    setPostType('Text');\n    handleClickOpen();\n  };\n\n  const handleImagePost = () => {\n    setPostType('Image');\n    handleClickOpen();\n  };\n\n  const handleLinkPost = () => {\n    setPostType('Link');\n    handleClickOpen();\n  };\n\n  const handleMenuClick = () => {\n    handleClickOpen();\n    handleMenuClose();\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div>\n      {actionType === 'edit' ? (\n        <MenuItem onClick={handleMenuClick}>\n          <ListItemIcon>\n            <EditIcon style={{ marginRight: 7 }} />\n            Edit Post\n          </ListItemIcon>\n        </MenuItem>\n      ) : isMobile ? (\n        <HideOnScroll>\n          <Fab\n            className={classes.fab}\n            color=\"primary\"\n            onClick={handleClickOpen}\n          >\n            <PostAddIcon />\n          </Fab>\n        </HideOnScroll>\n      ) : (\n        <Paper variant=\"outlined\" className={classes.createPostWrapper}>\n          {user.avatar && user.avatar.exists ? (\n            <Avatar\n              alt={user.username}\n              src={getCircularAvatar(user.avatar.imageLink)}\n            />\n          ) : (\n            <Avatar className={classes.defaultAvatar}>\n              {user.username[0]}\n            </Avatar>\n          )}\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={handleTextPost}\n            fullWidth\n            className={classes.createBtn}\n            startIcon={<PostAddIcon />}\n            size=\"large\"\n          >\n            Create Post\n          </Button>\n          <div className={classes.iconGroup}>\n            <IconButton onClick={handleImagePost}>\n              <ImageIcon color=\"primary\" />\n            </IconButton>\n            <IconButton onClick={handleLinkPost}>\n              <LinkIcon color=\"primary\" />\n            </IconButton>\n          </div>\n        </Paper>\n      )}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        classes={{ paper: classes.dialogWrapper }}\n        maxWidth=\"md\"\n        fullWidth={true}\n      >\n        <DialogTitle onClose={handleClose}>\n          {actionType === 'edit' ? 'Update your post' : 'Add a new post'}\n        </DialogTitle>\n        <DialogContent>\n          <PostForm\n            actionType={actionType}\n            postType={postType}\n            postToEditType={postToEditType}\n            postToEditTitle={postToEditTitle}\n            postToEditSub={postToEditSub}\n            postToEditId={postToEditId}\n            textSubmission={textSubmission}\n            linkSubmission={linkSubmission}\n            fromSubreddit={fromSubreddit}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AddPostModal;\n"],"mappings":"mHAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,aAAa,CACzC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,OAASC,iBAAiB,KAAQ,8BAA8B,CAEhE,OAASC,WAAW,CAAEC,aAAa,KAAQ,qBAAqB,CAChE,OACEC,MAAM,CACNC,MAAM,CACNC,GAAG,CACHC,UAAU,CACVC,KAAK,CACLC,MAAM,CACNC,aAAa,CACbC,QAAQ,CACRC,YAAY,KACP,mBAAmB,CAC1B,OAASC,eAAe,KAAQ,qBAAqB,CACrD,OAASC,QAAQ,KAAQ,0BAA0B,CACnD,MAAO,CAAAC,WAAW,KAAM,4BAA4B,CACpD,MAAO,CAAAC,SAAS,KAAM,0BAA0B,CAChD,MAAO,CAAAC,QAAQ,KAAM,yBAAyB,CAC9C,MAAO,CAAAC,QAAQ,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE/C,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAAC,IAAA,CAUZ,IATJ,CAAAC,UAAU,CAAAD,IAAA,CAAVC,UAAU,CACVC,eAAe,CAAAF,IAAA,CAAfE,eAAe,CACfC,cAAc,CAAAH,IAAA,CAAdG,cAAc,CACdC,eAAe,CAAAJ,IAAA,CAAfI,eAAe,CACfC,aAAa,CAAAL,IAAA,CAAbK,aAAa,CACbC,YAAY,CAAAN,IAAA,CAAZM,YAAY,CACZC,cAAc,CAAAP,IAAA,CAAdO,cAAc,CACdC,cAAc,CAAAR,IAAA,CAAdQ,cAAc,CACdC,aAAa,CAAAT,IAAA,CAAbS,aAAa,CAEb,IAAAC,SAAA,CAAwBrC,QAAQ,CAAC,KAAK,CAAC,CAAAsC,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAhCG,IAAI,CAAAF,UAAA,IAAEG,OAAO,CAAAH,UAAA,IACpB,IAAAI,UAAA,CAAgC1C,QAAQ,CAAC,MAAM,CAAC,CAAA2C,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAzCE,QAAQ,CAAAD,UAAA,IAAEE,WAAW,CAAAF,UAAA,IAC5B,GAAM,CAAAG,IAAI,CAAG7C,WAAW,CAAC,SAAC8C,KAAK,QAAK,CAAAA,KAAK,CAACD,IAAI,GAAC,CAE/C,GAAM,CAAAE,OAAO,CAAGhC,eAAe,EAAE,CACjC,GAAM,CAAAiC,KAAK,CAAGhC,QAAQ,EAAE,CACxB,GAAM,CAAAiC,QAAQ,CAAGrC,aAAa,CAACoC,KAAK,CAACE,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAE5D,GAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,CAAS,CAC5BZ,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,GAAM,CAAAa,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAS,CACxBb,OAAO,CAAC,KAAK,CAAC,CAChB,CAAC,CAED,GAAM,CAAAc,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAA,CAAS,CAC3BV,WAAW,CAAC,MAAM,CAAC,CACnBQ,eAAe,EAAE,CACnB,CAAC,CAED,GAAM,CAAAG,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,CAAS,CAC5BX,WAAW,CAAC,OAAO,CAAC,CACpBQ,eAAe,EAAE,CACnB,CAAC,CAED,GAAM,CAAAI,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAA,CAAS,CAC3BZ,WAAW,CAAC,MAAM,CAAC,CACnBQ,eAAe,EAAE,CACnB,CAAC,CAED,GAAM,CAAAK,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,CAAS,CAC5BL,eAAe,EAAE,CACjBxB,eAAe,EAAE,CACnB,CAAC,CAED,GAAI,CAACiB,IAAI,CAAE,CACT,MAAO,KAAI,CACb,CAEA,mBACErB,KAAA,QAAAkC,QAAA,EACG/B,UAAU,GAAK,MAAM,cACpBL,IAAA,CAACT,QAAQ,EAAC8C,OAAO,CAAEF,eAAgB,CAAAC,QAAA,cACjClC,KAAA,CAACV,YAAY,EAAA4C,QAAA,eACXpC,IAAA,CAACF,QAAQ,EAACwC,KAAK,CAAE,CAAEC,WAAW,CAAE,CAAE,CAAE,EAAG,YAEzC,GAAe,EACN,CACTZ,QAAQ,cACV3B,IAAA,CAACpB,YAAY,EAAAwD,QAAA,cACXpC,IAAA,CAACd,GAAG,EACFsD,SAAS,CAAEf,OAAO,CAACgB,GAAI,CACvBC,KAAK,CAAC,SAAS,CACfL,OAAO,CAAEP,eAAgB,CAAAM,QAAA,cAEzBpC,IAAA,CAACL,WAAW,IAAG,EACX,EACO,cAEfO,KAAA,CAACd,KAAK,EAACuD,OAAO,CAAC,UAAU,CAACH,SAAS,CAAEf,OAAO,CAACmB,iBAAkB,CAAAR,QAAA,EAC5Db,IAAI,CAACsB,MAAM,EAAItB,IAAI,CAACsB,MAAM,CAACC,MAAM,cAChC9C,IAAA,CAACX,MAAM,EACL0D,GAAG,CAAExB,IAAI,CAACyB,QAAS,CACnBC,GAAG,CAAEpE,iBAAiB,CAAC0C,IAAI,CAACsB,MAAM,CAACK,SAAS,CAAE,EAC9C,cAEFlD,IAAA,CAACX,MAAM,EAACmD,SAAS,CAAEf,OAAO,CAAC0B,aAAc,CAAAf,QAAA,CACtCb,IAAI,CAACyB,QAAQ,CAAC,CAAC,CAAC,EAEpB,cACDhD,IAAA,CAACf,MAAM,EACLyD,KAAK,CAAC,SAAS,CACfC,OAAO,CAAC,UAAU,CAClBN,OAAO,CAAEL,cAAe,CACxBoB,SAAS,MACTZ,SAAS,CAAEf,OAAO,CAAC4B,SAAU,CAC7BC,SAAS,cAAEtD,IAAA,CAACL,WAAW,IAAI,CAC3B4D,IAAI,CAAC,OAAO,CAAAnB,QAAA,CACb,aAED,EAAS,cACTlC,KAAA,QAAKsC,SAAS,CAAEf,OAAO,CAAC+B,SAAU,CAAApB,QAAA,eAChCpC,IAAA,CAACb,UAAU,EAACkD,OAAO,CAAEJ,eAAgB,CAAAG,QAAA,cACnCpC,IAAA,CAACJ,SAAS,EAAC8C,KAAK,CAAC,SAAS,EAAG,EAClB,cACb1C,IAAA,CAACb,UAAU,EAACkD,OAAO,CAAEH,cAAe,CAAAE,QAAA,cAClCpC,IAAA,CAACH,QAAQ,EAAC6C,KAAK,CAAC,SAAS,EAAG,EACjB,GACT,GAET,cACDxC,KAAA,CAAClB,MAAM,EACLiC,IAAI,CAAEA,IAAK,CACXwC,OAAO,CAAE1B,WAAY,CACrBN,OAAO,CAAE,CAAEiC,KAAK,CAAEjC,OAAO,CAACkC,aAAc,CAAE,CAC1CC,QAAQ,CAAC,IAAI,CACbR,SAAS,CAAE,IAAK,CAAAhB,QAAA,eAEhBpC,IAAA,CAAClB,WAAW,EAAC2E,OAAO,CAAE1B,WAAY,CAAAK,QAAA,CAC/B/B,UAAU,GAAK,MAAM,CAAG,kBAAkB,CAAG,gBAAgB,EAClD,cACdL,IAAA,CAACjB,aAAa,EAAAqD,QAAA,cACZpC,IAAA,CAACrB,QAAQ,EACP0B,UAAU,CAAEA,UAAW,CACvBgB,QAAQ,CAAEA,QAAS,CACnBd,cAAc,CAAEA,cAAe,CAC/BC,eAAe,CAAEA,eAAgB,CACjCC,aAAa,CAAEA,aAAc,CAC7BC,YAAY,CAAEA,YAAa,CAC3BC,cAAc,CAAEA,cAAe,CAC/BC,cAAc,CAAEA,cAAe,CAC/BC,aAAa,CAAEA,aAAc,EAC7B,EACY,GACT,GACL,CAEV,CAAC,CAED,cAAe,CAAAV,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}