{"ast":null,"code":"import { forEach } from 'property-expr';\nvar trim = function trim(part) {\n  return part.substr(0, part.length - 1).substr(1);\n};\nexport function getIn(schema, path, value, context) {\n  if (context === void 0) {\n    context = value;\n  }\n  var parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent: parent,\n    parentPath: path,\n    schema: schema\n  };\n  forEach(path, function (_part, isBracket, isArray) {\n    var part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context: context,\n      parent: parent,\n      value: value\n    });\n    if (schema.innerType) {\n      var idx = isArray ? parseInt(part, 10) : 0;\n      if (value && idx >= value.length) {\n        throw new Error(\"Yup.reach cannot resolve an array item at index: \" + _part + \", in the path: \" + path + \". \" + \"because there is no value at that index. \");\n      }\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(\"The schema does not contain the path: \" + path + \". \" + (\"(failed at: \" + lastPartDebug + \" which is a type: \\\"\" + schema._type + \"\\\")\"));\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema: schema,\n    parent: parent,\n    parentPath: lastPart\n  };\n}\nvar reach = function reach(obj, path, value, context) {\n  return getIn(obj, path, value, context).schema;\n};\nexport default reach;","map":{"version":3,"names":["forEach","trim","part","substr","length","getIn","schema","path","value","context","parent","lastPart","lastPartDebug","parentPath","_part","isBracket","isArray","resolve","innerType","idx","parseInt","Error","fields","_type","reach","obj"],"sources":["C:/Ak/E/reddish-master/client/node_modules/yup/es/util/reach.js"],"sourcesContent":["import { forEach } from 'property-expr';\n\nvar trim = function trim(part) {\n  return part.substr(0, part.length - 1).substr(1);\n};\n\nexport function getIn(schema, path, value, context) {\n  if (context === void 0) {\n    context = value;\n  }\n\n  var parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent: parent,\n    parentPath: path,\n    schema: schema\n  };\n  forEach(path, function (_part, isBracket, isArray) {\n    var part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context: context,\n      parent: parent,\n      value: value\n    });\n\n    if (schema.innerType) {\n      var idx = isArray ? parseInt(part, 10) : 0;\n\n      if (value && idx >= value.length) {\n        throw new Error(\"Yup.reach cannot resolve an array item at index: \" + _part + \", in the path: \" + path + \". \" + \"because there is no value at that index. \");\n      }\n\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(\"The schema does not contain the path: \" + path + \". \" + (\"(failed at: \" + lastPartDebug + \" which is a type: \\\"\" + schema._type + \"\\\")\"));\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema: schema,\n    parent: parent,\n    parentPath: lastPart\n  };\n}\n\nvar reach = function reach(obj, path, value, context) {\n  return getIn(obj, path, value, context).schema;\n};\n\nexport default reach;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AAEvC,IAAIC,IAAI,GAAG,SAASA,IAAIA,CAACC,IAAI,EAAE;EAC7B,OAAOA,IAAI,CAACC,MAAM,CAAC,CAAC,EAAED,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAACD,MAAM,CAAC,CAAC,CAAC;AAClD,CAAC;AAED,OAAO,SAASE,KAAKA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAE;EAClD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAGD,KAAK;EACjB;EAEA,IAAIE,MAAM,EAAEC,QAAQ,EAAEC,aAAa,CAAC,CAAC;;EAErC,IAAI,CAACL,IAAI,EAAE,OAAO;IAChBG,MAAM,EAAEA,MAAM;IACdG,UAAU,EAAEN,IAAI;IAChBD,MAAM,EAAEA;EACV,CAAC;EACDN,OAAO,CAACO,IAAI,EAAE,UAAUO,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACjD,IAAId,IAAI,GAAGa,SAAS,GAAGd,IAAI,CAACa,KAAK,CAAC,GAAGA,KAAK;IAC1CR,MAAM,GAAGA,MAAM,CAACW,OAAO,CAAC;MACtBR,OAAO,EAAEA,OAAO;MAChBC,MAAM,EAAEA,MAAM;MACdF,KAAK,EAAEA;IACT,CAAC,CAAC;IAEF,IAAIF,MAAM,CAACY,SAAS,EAAE;MACpB,IAAIC,GAAG,GAAGH,OAAO,GAAGI,QAAQ,CAAClB,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC;MAE1C,IAAIM,KAAK,IAAIW,GAAG,IAAIX,KAAK,CAACJ,MAAM,EAAE;QAChC,MAAM,IAAIiB,KAAK,CAAC,mDAAmD,GAAGP,KAAK,GAAG,iBAAiB,GAAGP,IAAI,GAAG,IAAI,GAAG,2CAA2C,CAAC;MAC9J;MAEAG,MAAM,GAAGF,KAAK;MACdA,KAAK,GAAGA,KAAK,IAAIA,KAAK,CAACW,GAAG,CAAC;MAC3Bb,MAAM,GAAGA,MAAM,CAACY,SAAS;IAC3B,CAAC,CAAC;IACF;IACA;IACA;;IAGA,IAAI,CAACF,OAAO,EAAE;MACZ,IAAI,CAACV,MAAM,CAACgB,MAAM,IAAI,CAAChB,MAAM,CAACgB,MAAM,CAACpB,IAAI,CAAC,EAAE,MAAM,IAAImB,KAAK,CAAC,wCAAwC,GAAGd,IAAI,GAAG,IAAI,IAAI,cAAc,GAAGK,aAAa,GAAG,sBAAsB,GAAGN,MAAM,CAACiB,KAAK,GAAG,KAAK,CAAC,CAAC;MACtMb,MAAM,GAAGF,KAAK;MACdA,KAAK,GAAGA,KAAK,IAAIA,KAAK,CAACN,IAAI,CAAC;MAC5BI,MAAM,GAAGA,MAAM,CAACgB,MAAM,CAACpB,IAAI,CAAC;IAC9B;IAEAS,QAAQ,GAAGT,IAAI;IACfU,aAAa,GAAGG,SAAS,GAAG,GAAG,GAAGD,KAAK,GAAG,GAAG,GAAG,GAAG,GAAGA,KAAK;EAC7D,CAAC,CAAC;EACF,OAAO;IACLR,MAAM,EAAEA,MAAM;IACdI,MAAM,EAAEA,MAAM;IACdG,UAAU,EAAEF;EACd,CAAC;AACH;AAEA,IAAIa,KAAK,GAAG,SAASA,KAAKA,CAACC,GAAG,EAAElB,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACpD,OAAOJ,KAAK,CAACoB,GAAG,EAAElB,IAAI,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAACH,MAAM;AAChD,CAAC;AAED,eAAekB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}