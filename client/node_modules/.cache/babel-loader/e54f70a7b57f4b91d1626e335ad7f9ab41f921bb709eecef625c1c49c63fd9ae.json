{"ast":null,"code":"import _regeneratorRuntime from\"C:/Ak/E/reddish-master/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Ak/E/reddish-master/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import axios from'axios';import backendUrl from'../backendUrl';import{token}from'./auth';var baseUrl=\"\".concat(backendUrl,\"/api/subreddits\");var setConfig=function setConfig(){return{headers:{'x-auth-token':token}};};var getAllSubreddits=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(baseUrl);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}},_callee);}));return function getAllSubreddits(){return _ref.apply(this,arguments);};}();var getSubreddit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(subredditName,sortBy,limit,page){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return axios.get(\"\".concat(baseUrl,\"/r/\").concat(subredditName,\"/?sortby=\").concat(sortBy,\"&limit=\").concat(limit,\"&page=\").concat(page));case 2:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 4:case\"end\":return _context2.stop();}},_callee2);}));return function getSubreddit(_x,_x2,_x3,_x4){return _ref2.apply(this,arguments);};}();var createSubreddit=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(subredditObj){var response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.next=2;return axios.post(\"\".concat(baseUrl),subredditObj,setConfig());case 2:response=_context3.sent;return _context3.abrupt(\"return\",response.data);case 4:case\"end\":return _context3.stop();}},_callee3);}));return function createSubreddit(_x5){return _ref3.apply(this,arguments);};}();var subscribeSub=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id){var response;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:_context4.next=2;return axios.post(\"\".concat(baseUrl,\"/\").concat(id,\"/subscribe\"),null,setConfig());case 2:response=_context4.sent;return _context4.abrupt(\"return\",response.data);case 4:case\"end\":return _context4.stop();}},_callee4);}));return function subscribeSub(_x6){return _ref4.apply(this,arguments);};}();var updateDescription=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(id,descriptionObj){var response;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:_context5.next=2;return axios.patch(\"\".concat(baseUrl,\"/\").concat(id),descriptionObj,setConfig());case 2:response=_context5.sent;return _context5.abrupt(\"return\",response.data);case 4:case\"end\":return _context5.stop();}},_callee5);}));return function updateDescription(_x7,_x8){return _ref5.apply(this,arguments);};}();var getTopSubreddits=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var response;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.next=2;return axios.get(\"\".concat(baseUrl,\"/top10\"));case 2:response=_context6.sent;return _context6.abrupt(\"return\",response.data);case 4:case\"end\":return _context6.stop();}},_callee6);}));return function getTopSubreddits(){return _ref6.apply(this,arguments);};}();var subService={getAllSubreddits:getAllSubreddits,createSubreddit:createSubreddit,getSubreddit:getSubreddit,subscribeSub:subscribeSub,updateDescription:updateDescription,getTopSubreddits:getTopSubreddits};export default subService;","map":{"version":3,"names":["axios","backendUrl","token","baseUrl","concat","setConfig","headers","getAllSubreddits","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","sent","abrupt","data","stop","apply","arguments","getSubreddit","_ref2","_callee2","subredditName","sortBy","limit","page","_callee2$","_context2","_x","_x2","_x3","_x4","createSubreddit","_ref3","_callee3","subredditObj","_callee3$","_context3","post","_x5","subscribeSub","_ref4","_callee4","id","_callee4$","_context4","_x6","updateDescription","_ref5","_callee5","descriptionObj","_callee5$","_context5","patch","_x7","_x8","getTopSubreddits","_ref6","_callee6","_callee6$","_context6","subService"],"sources":["C:/Ak/E/reddish-master/client/src/services/subs.js"],"sourcesContent":["import axios from 'axios';\nimport backendUrl from '../backendUrl';\nimport { token } from './auth';\n\nconst baseUrl = `${backendUrl}/api/subreddits`;\n\nconst setConfig = () => {\n  return {\n    headers: { 'x-auth-token': token },\n  };\n};\n\nconst getAllSubreddits = async () => {\n  const response = await axios.get(baseUrl);\n  return response.data;\n};\n\nconst getSubreddit = async (subredditName, sortBy, limit, page) => {\n  const response = await axios.get(\n    `${baseUrl}/r/${subredditName}/?sortby=${sortBy}&limit=${limit}&page=${page}`\n  );\n  return response.data;\n};\n\nconst createSubreddit = async (subredditObj) => {\n  const response = await axios.post(`${baseUrl}`, subredditObj, setConfig());\n  return response.data;\n};\n\nconst subscribeSub = async (id) => {\n  const response = await axios.post(\n    `${baseUrl}/${id}/subscribe`,\n    null,\n    setConfig()\n  );\n  return response.data;\n};\n\nconst updateDescription = async (id, descriptionObj) => {\n  const response = await axios.patch(\n    `${baseUrl}/${id}`,\n    descriptionObj,\n    setConfig()\n  );\n  return response.data;\n};\n\nconst getTopSubreddits = async () => {\n  const response = await axios.get(`${baseUrl}/top10`);\n  return response.data;\n};\n\nconst subService = {\n  getAllSubreddits,\n  createSubreddit,\n  getSubreddit,\n  subscribeSub,\n  updateDescription,\n  getTopSubreddits,\n};\n\nexport default subService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}