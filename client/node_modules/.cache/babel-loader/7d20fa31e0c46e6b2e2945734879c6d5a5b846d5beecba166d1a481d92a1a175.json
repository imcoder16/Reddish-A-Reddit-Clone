{"ast":null,"code":"import subService from '../services/subs';\nconst subReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'SET_ALL_SUBS_LIST':\n      return {\n        ...state,\n        allSubs: action.payload\n      };\n    case 'SET_TOP_SUBS_LIST':\n      return {\n        ...state,\n        topSubs: action.payload\n      };\n    case 'SUBSCRIBE_SUB_FROM_LIST':\n      return {\n        ...state,\n        topSubs: state.topSubs.map(t => t.id !== action.payload.id ? t : {\n          ...t,\n          ...action.payload.data\n        })\n      };\n    case 'ADD_NEW_SUB':\n      return {\n        ...state,\n        allSubs: [...state.allSubs, action.payload]\n      };\n    default:\n      return state;\n  }\n};\nexport const setSubList = () => {\n  return async dispatch => {\n    const subs = await subService.getAllSubreddits();\n    dispatch({\n      type: 'SET_ALL_SUBS_LIST',\n      payload: subs\n    });\n  };\n};\nexport const setTopSubsList = () => {\n  return async dispatch => {\n    const top10Subs = await subService.getTopSubreddits();\n    dispatch({\n      type: 'SET_TOP_SUBS_LIST',\n      payload: top10Subs\n    });\n  };\n};\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async dispatch => {\n    const subscriberCount = subscribedBy.length;\n    dispatch({\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\n      payload: {\n        id,\n        data: {\n          subscribedBy,\n          subscriberCount\n        }\n      }\n    });\n    await subService.subscribeSub(id);\n  };\n};\nexport const addNewSub = subredditObj => {\n  return async dispatch => {\n    const createdSub = await subService.createSubreddit(subredditObj);\n    dispatch({\n      type: 'ADD_NEW_SUB',\n      payload: {\n        subredditName: createdSub.subredditName,\n        id: createdSub.id\n      }\n    });\n  };\n};\nexport default subReducer;","map":{"version":3,"names":["subService","subReducer","state","arguments","length","undefined","action","type","allSubs","payload","topSubs","map","t","id","data","setSubList","dispatch","subs","getAllSubreddits","setTopSubsList","top10Subs","getTopSubreddits","toggleSubscribe","subscribedBy","subscriberCount","subscribeSub","addNewSub","subredditObj","createdSub","createSubreddit","subredditName"],"sources":["C:/Ak/E/reddish-master/client/src/reducers/subReducer.js"],"sourcesContent":["import subService from '../services/subs';\n\nconst subReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_ALL_SUBS_LIST':\n      return { ...state, allSubs: action.payload };\n    case 'SET_TOP_SUBS_LIST':\n      return { ...state, topSubs: action.payload };\n    case 'SUBSCRIBE_SUB_FROM_LIST':\n      return {\n        ...state,\n        topSubs: state.topSubs.map((t) =>\n          t.id !== action.payload.id ? t : { ...t, ...action.payload.data }\n        ),\n      };\n    case 'ADD_NEW_SUB':\n      return {\n        ...state,\n        allSubs: [...state.allSubs, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setSubList = () => {\n  return async (dispatch) => {\n    const subs = await subService.getAllSubreddits();\n\n    dispatch({\n      type: 'SET_ALL_SUBS_LIST',\n      payload: subs,\n    });\n  };\n};\n\nexport const setTopSubsList = () => {\n  return async (dispatch) => {\n    const top10Subs = await subService.getTopSubreddits();\n\n    dispatch({\n      type: 'SET_TOP_SUBS_LIST',\n      payload: top10Subs,\n    });\n  };\n};\n\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async (dispatch) => {\n    const subscriberCount = subscribedBy.length;\n\n    dispatch({\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\n      payload: { id, data: { subscribedBy, subscriberCount } },\n    });\n\n    await subService.subscribeSub(id);\n  };\n};\n\nexport const addNewSub = (subredditObj) => {\n  return async (dispatch) => {\n    const createdSub = await subService.createSubreddit(subredditObj);\n\n    dispatch({\n      type: 'ADD_NEW_SUB',\n      payload: {\n        subredditName: createdSub.subredditName,\n        id: createdSub.id,\n      },\n    });\n  };\n};\n\nexport default subReducer;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,kBAAkB;AAEzC,MAAMC,UAAU,GAAG,SAAAA,CAAA,EAA0B;EAAA,IAAzBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACtC,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGL,KAAK;QAAEM,OAAO,EAAEF,MAAM,CAACG;MAAQ,CAAC;IAC9C,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGP,KAAK;QAAEQ,OAAO,EAAEJ,MAAM,CAACG;MAAQ,CAAC;IAC9C,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGP,KAAK;QACRQ,OAAO,EAAER,KAAK,CAACQ,OAAO,CAACC,GAAG,CAAEC,CAAC,IAC3BA,CAAC,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,CAACI,EAAE,GAAGD,CAAC,GAAG;UAAE,GAAGA,CAAC;UAAE,GAAGN,MAAM,CAACG,OAAO,CAACK;QAAK,CAAC;MAErE,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGZ,KAAK;QACRM,OAAO,EAAE,CAAC,GAAGN,KAAK,CAACM,OAAO,EAAEF,MAAM,CAACG,OAAO;MAC5C,CAAC;IACH;MACE,OAAOP,KAAK;EAAC;AAEnB,CAAC;AAED,OAAO,MAAMa,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,IAAI,GAAG,MAAMjB,UAAU,CAACkB,gBAAgB,EAAE;IAEhDF,QAAQ,CAAC;MACPT,IAAI,EAAE,mBAAmB;MACzBE,OAAO,EAAEQ;IACX,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAO,MAAOH,QAAQ,IAAK;IACzB,MAAMI,SAAS,GAAG,MAAMpB,UAAU,CAACqB,gBAAgB,EAAE;IAErDL,QAAQ,CAAC;MACPT,IAAI,EAAE,mBAAmB;MACzBE,OAAO,EAAEW;IACX,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAACT,EAAE,EAAEU,YAAY,KAAK;EACnD,OAAO,MAAOP,QAAQ,IAAK;IACzB,MAAMQ,eAAe,GAAGD,YAAY,CAACnB,MAAM;IAE3CY,QAAQ,CAAC;MACPT,IAAI,EAAE,yBAAyB;MAC/BE,OAAO,EAAE;QAAEI,EAAE;QAAEC,IAAI,EAAE;UAAES,YAAY;UAAEC;QAAgB;MAAE;IACzD,CAAC,CAAC;IAEF,MAAMxB,UAAU,CAACyB,YAAY,CAACZ,EAAE,CAAC;EACnC,CAAC;AACH,CAAC;AAED,OAAO,MAAMa,SAAS,GAAIC,YAAY,IAAK;EACzC,OAAO,MAAOX,QAAQ,IAAK;IACzB,MAAMY,UAAU,GAAG,MAAM5B,UAAU,CAAC6B,eAAe,CAACF,YAAY,CAAC;IAEjEX,QAAQ,CAAC;MACPT,IAAI,EAAE,aAAa;MACnBE,OAAO,EAAE;QACPqB,aAAa,EAAEF,UAAU,CAACE,aAAa;QACvCjB,EAAE,EAAEe,UAAU,CAACf;MACjB;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,eAAeZ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}